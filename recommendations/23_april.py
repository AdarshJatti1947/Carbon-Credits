# -*- coding: utf-8 -*-
"""23_april.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/183as04RRo-1ifD1ODmxb0znrpImy_b0N
"""

!pip install sentence-transformers

import torch
from sentence_transformers import SentenceTransformer
import pandas as pd
import pickle

device = 'cpu'  # Use 'cuda' for Nvidia GPU or 'cpu' for CPU


model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
model = model.to(device) # "mps" for Mac Gpu or "cuda" for Nvidia Gpu

from sentence_transformers import util
import pandas as pd

df_new = pd.read_csv("/content/final_changed.csv") # Dataset available above
df1 = df_new.head(15)

embeddings1 = model.encode(df1["Primary Industry, Country"].to_list(), show_progress_bar=True)
with open('meme-embeddings1.pkl', "wb") as fOut:
    pickle.dump(embeddings1, fOut)

embeddings2 = model.encode(df1["Company"].to_list(), show_progress_bar=True)
with open('meme-embeddings2.pkl', "wb") as fOut:
    pickle.dump(embeddings2, fOut)

def fun1(prompt):

  prompt_embedding = model.encode(prompt, convert_to_tensor=True)

  hits = util.semantic_search(prompt_embedding, embeddings1, top_k=15)
  hits = pd.DataFrame(hits[0], columns=['corpus_id', 'score'])

  # Note that "corpus_id" is the index of the meme for that embedding
  # You can use the "corpus_id" to look up the meme

  miss=util.semantic_search(prompt_embedding, embeddings2, top_k=15)
  miss = pd.DataFrame(miss[0], columns=['corpus_id', 'score'])

  # Extracting corpus_id values as a list

  hits_filtered1 = hits[hits['score'] >= 0.50]

  corpus_ids_list1 = hits_filtered1['corpus_id'].tolist()

  #print(corpus_ids_list1)

  hits_filtered2 = miss[miss['score'] >= 0.50]

  corpus_ids_list2 = hits_filtered2['corpus_id'].tolist()

  #print(corpus_ids_list2)

  # Retrieve rows based on row numbers in corpus_ids_list_modified
  selected_rows1 = df1.iloc[corpus_ids_list1]
  selected_rows2 = df1.iloc[corpus_ids_list2]

  # Include a particular column
  selected_rows_with_column1 = selected_rows1[['Company','Primary Industry, Country']]

  #selected_rows_with_column1


  selected_rows_with_column2 = selected_rows2[['Company','Primary Industry, Country']]

  #selected_rows_with_column2

  first_hit_score = hits['score'].iloc[0]
  first_miss_score = miss['score'].iloc[0]

  #print("First score from hits:", first_hit_score)
  #print("First score from miss:", first_miss_score)

  if len(corpus_ids_list1)!=0 and len(corpus_ids_list2)!=0:
    if first_hit_score>first_miss_score:
      return pd.DataFrame(selected_rows_with_column1)
    else:
      return pd.DataFrame(selected_rows_with_column2)
  else:
    if len(corpus_ids_list1)==0:
      return pd.DataFrame(selected_rows_with_column2)
    if len(corpus_ids_list2)==0:
      return pd.DataFrame(selected_rows_with_column1)

prompt="Give me details of all the computers and electronics companies "
result=fun1(prompt)
result

json_data = result.to_json()
json_data

import json
data = json.loads(json_data)
company_keys = list(data['Company'].keys())
company_keys